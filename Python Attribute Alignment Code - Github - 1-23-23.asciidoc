
= Provide some reference for different approaches to latexmath:[$a>2$]

There is some complexity in making a decision about how to define
alignment in this setting. We want to make sure that some sense of what
can happen is presented here.

Run the first cell below to store the necessary functions in the
computer. The cell below shows how to use these functions to process
your data.


+*In[3]:*+
[source, ipython3]
----
import pandas
import numpy as np
from scipy.spatial.distance import cdist
from scipy.stats import linregress
from scipy.special import gamma
from itertools import permutations, combinations
import matplotlib.pyplot as plt
%matplotlib inline

# MINIMUM_DISTANCE_BASE is a quantity that helps make sure the difference between two vectors is never actually 0
# This is a reasonable assumption under the belief that observations are made in the presence of noise
# If we actually knew the distribution of the noise we could set this in an informed fashion
# Without that, we can simply set this to a "small" number and then play around with it
MINIMUM_DISTANCE_BASE = .001

# Set TEAM_SIZE_SCALING = True to allow for the distance between larger teams to be scaled down
TEAM_SIZE_SCALING = True

def extract_columns(columns, all_data, team_id_name='OverallGroupID', outcome_column_name=None):
    data_matrix = all_data.values
    team_id_index = np.where(imported_data.columns == team_id_name)[0][0]
    if outcome_column_name:
        outcome_index = np.where(imported_data.columns == outcome_column_name)[0][0]
        
    results = {}
    for row_num, row in enumerate(data_matrix):
        team = int(row[team_id_index])
        if team not in results:
            results[team] = {'attribute_dict': {column: [] for column in columns}}
        if outcome_column_name:
            results[team][outcome_column_name] = row[outcome_index]
        for column in sorted(columns):
            results[team]['attribute_dict'][column].append(all_data[column][row_num])
        results[team]['attributes'] = np.array([results[team]['attribute_dict'][column] for column in columns]).T
        
    return results

def _determine_auxiliary_terms(attributes, minimum_distance_base, team_size_scaling):
    d = len(attributes)
    team_size_scaling_value = 1 / np.sqrt(d) if team_size_scaling else 1.0
    minimum_distance = minimum_distance_base * gamma((d + 1) / 2) / gamma(d / 2) * team_size_scaling_value
    return minimum_distance, team_size_scaling_value

def compute_potential_energy(attributes, minimum_distance_base=MINIMUM_DISTANCE_BASE, team_size_scaling=TEAM_SIZE_SCALING):
    minimum_distance, team_size_scaling_value = _determine_auxiliary_terms(attributes, minimum_distance_base, team_size_scaling)
    distance_matrix = cdist(attributes.T, attributes.T)
    d = np.fmax(distance_matrix * team_size_scaling_value, minimum_distance)
    distances = d[np.where(np.triu(d, 1))]
    return minimum_distance / len(distances) * np.sum(1 / distances)

def compute_svd_alignment(attributes, minimum_distance_base=MINIMUM_DISTANCE_BASE, team_size_scaling=TEAM_SIZE_SCALING, num_draws=50, max_draws=10000):
    minimum_distance, _ = _determine_auxiliary_terms(attributes, minimum_distance_base, team_size_scaling)
    
    # The team size is already accounted for in the Frobenius norm
    # If we want to shut off the impact of team size, we multiply back in the 
    def _svd_alignment(x):
        singular_values = np.linalg.svd(x, compute_uv=False)
        team_size_scaling_value = (1.0 if not team_size_scaling else len(x)) / np.linalg.norm(x, ord='fro')
        return singular_values[0] / singular_values[1] * team_size_scaling_value
    
    # Technically, the restriction to all positive values isn't necessary, but I think it makes sense
    # The random_shift goes up to 2 * minimum_distance to allow a decent potential of convergence even for high alignment
    vals = []
    for _ in range(max_draws):
        random_shift = np.random.uniform(-1, 1, size=attributes.shape)
        random_shift = np.random.uniform(0, 2 * minimum_distance) * random_shift / np.sqrt(np.sum(random_shift ** 2, axis=0)[None, :])
        shifted_attributes = np.fmax(attributes + random_shift, 0)
        distance_matrix = cdist(shifted_attributes.T, shifted_attributes.T)
        distances = distance_matrix[np.where(np.triu(distance_matrix, 1))]
        if not all(distances > minimum_distance):
            continue
        
        vals.append(_svd_alignment(shifted_attributes))
        if len(vals) >= num_draws:
            break
    else:
        raise ValueError('SVD alignment falied to converge')
    
    return np.mean(vals)

def compute_average_distance(attributes, minimum_distance_base=MINIMUM_DISTANCE_BASE, team_size_scaling=TEAM_SIZE_SCALING):
    minimum_distance, team_size_scaling_value = _determine_auxiliary_terms(attributes, minimum_distance_base, team_size_scaling)
    distance_matrix = cdist(attributes.T, attributes.T)
    d = np.fmax(distance_matrix * team_size_scaling_value, minimum_distance)
    distances = d[np.where(np.triu(d, 1))]
    return 1 / len(distances) * np.sum(distances)

def compute_pairwise_distances(attributes, minimum_distance_base=MINIMUM_DISTANCE_BASE, team_size_scaling=TEAM_SIZE_SCALING):
    minimum_distance, team_size_scaling_value = _determine_auxiliary_terms(attributes, minimum_distance_base, team_size_scaling)
    distances = []
    for i1, i2 in combinations(np.arange(attributes.shape[1]), 2):
        distances.append(np.linalg.norm(attributes[:, i1] - attributes[:, i2]))
    return np.fmax(np.array(distances) * team_size_scaling_value, minimum_distance)

def add_metrics(info, minimum_distance_base=MINIMUM_DISTANCE_BASE, team_size_scaling=TEAM_SIZE_SCALING):
    for team_id, stuff in info.items():
        attributes = stuff['attributes']
        stuff['metrics'] = {
            'energy': compute_potential_energy(attributes, minimum_distance_base, team_size_scaling),
            'avg_dist': compute_average_distance(attributes, minimum_distance_base, team_size_scaling),
            'svd': compute_svd_alignment(attributes, minimum_distance_base, team_size_scaling),
            'pairwise': compute_pairwise_distances(attributes, minimum_distance_base, team_size_scaling),
        }
        
def print_metrics(info, team_id_name='OverallGroupID', outcome_column_name='outcome', savefile=None, csv_sep='\t', suppress_output=False):
    header_printed = False
    lines = []
    def print_maybe(string):
        if not suppress_output:
            print(string)
    
    for team_id, stuff in info.items():
        if not header_printed:
            attribute_names = [attribute for attribute in sorted(stuff['attribute_dict'].keys())]
            metric_names = [metric for metric in sorted(stuff['metrics'].keys()) if metric != 'pairwise']
            s = [team_id_name, outcome_column_name]
            s += metric_names
            if 'pairwise' in stuff['metrics']:
                for attribute_1, attribute_2 in combinations(attribute_names, 2):
                    s.append('--'.join(['pairwise', attribute_1, attribute_2]))
            s = csv_sep.join(s)
            print_maybe(s)
            lines.append(s)
            header_printed = True
        s = [team_id, stuff[outcome_column_name]] + [stuff['metrics'][metric] for metric in metric_names]
        s += stuff['metrics']['pairwise'].tolist()
        s = csv_sep.join((str(ss) for ss in s))
        print_maybe(s)
        lines.append(s)
    
    if savefile:
        with open(savefile, 'w') as f:
            f.writelines(l + '\n' for l in lines)
----

== These lines are the lines that are used to compute the alignment
values and print/save them

* Fill in your file names (right now `'my-data-file.csv'` and
`'where-i-store-alignment-values.csv'`)
* Set `outcome_column_name` to be whatever the name of the column that
the outcome
* Replace `('attribute_0', 'attribute_1', 'attribute_2', 'attribute_3')`
with whatever attributes you want to study.
* Set suppress_output equal to False if you want the data to appear on
this screen.
* Then, copy/paste the data into Microsoft Excel and separate into
columns where spaces appear
** Data => Text to Columns => Delimited => Check ``space'' => Finish

This block will not run as it is right now because these files do not
exist


+*In[4]:*+
[source, ipython3]
----
outcome_column_name = 'DV'
attributes_to_study = ('attribute_0', 'attribute_1', 'attribute_2', 'attribute_3')

imported_data = pandas.read_csv('my-data-file.csv', index_col=False, sep=',')
results = extract_columns(attributes_to_study, imported_data, outcome_column_name=outcome_column_name)
add_metrics(results)
# Set suppress_output=False to print to screen
print_metrics(results, savefile='where-i-store-alignment-values.csv', suppress_output=False, outcome_column_name=outcome_column_name)
----


+*Out[4]:*+
----
OverallGroupID	CLU4_1	avg_dist	energy	svd	pairwise--Challenger--Doer	pairwise--Challenger--Innovator	pairwise--Challenger--Organizer	pairwise--Challenger--TeamBuilder	pairwise--Doer--Innovator	pairwise--Doer--Organizer	pairwise--Doer--TeamBuilder	pairwise--Innovator--Organizer	pairwise--Innovator--TeamBuilder	pairwise--Organizer--TeamBuilder
104	1	0.45848015403678777	0.0018311550310138372	3.83371359922117	0.43033148291193835	0.3191423692521122	0.48112522432468957	0.21516574145596687	0.5692750425533134	0.5181877251716015	0.48112522432468957	0.7817359599705718	0.13608276348795315	0.6526300069150409
105	1	0.6468626703299208	0.0012654713991637058	4.1230091737788	0.44095855184409954	0.7312470322826751	0.8291561975888491	0.2041241452319297	0.7312470322826762	0.6614378277661488	0.39086797998528516	1.1365151414154857	0.6508541396588864	0.6922186552431724
202	1	0.4767284344043117	0.001547199039330228	4.477388105668258	0.5055250296034364	0.38005847503304885	0.8333333333333329	0.35746017649212086	0.34960294939004993	0.35746017649212003	0.3073181485764283	0.5527707983925642	0.4654746681256333	0.6582805886043814
204	1	0.6353142833513132	0.0012045505371782808	2.763251853841745	0.6291528696058964	0.408248290463863	0.39965262694272635	0.8539125638299677	0.7500000000000006	0.7168604389202218	0.31180478223116137	0.43301270189221847	0.8858454843945551	0.9646530752325213
205	1	0.7869157733046928	0.0009071080424439022	2.8535859695465065	0.488762609953839	0.8850612031567852	0.9067647005823636	1.1005049346146119	0.9128709291752759	0.6624868971450589	0.8850612031567846	0.5821416398857672	0.8399735445569432	0.6055300708194974
206	1	0.45167139301837955	0.0015551927287913005	6.751156575776183	0.5426273532033267	0.34960294939005077	0.494413232473044	0.3651483716701107	0.5000000000000012	0.4409585518441002	0.6191391873668922	0.2981423969999713	0.45946829173633985	0.4472135954999579
208	1	0.6682939655223615	0.0010661158915357914	2.462152911600509	0.6508541396588864	0.5137011669140833	0.6718548123582129	0.5590169943749468	0.3996526269427254	0.623609564462324	0.8660254037844369	0.6400954789890516	0.6400954789890523	1.1180339887498953
209	1	0.6194156773895114	0.0012277063823734737	4.733282582950061	0.7745966692414826	0.5916079783099636	0.35746017649211753	0.34156502553198576	0.9398581453247786	0.5322906474223787	0.8850612031567816	0.7958224257542207	0.4082482904638623	0.5676462121975433
212	1	0.5394263065593521	0.0015789390554437528	4.445212197135456	0.3227486121839514	0.2204792759220481	0.8079466429027211	0.5137011669140819	0.2041241452319315	0.5951190357119011	0.618016540591302	0.7216878364870306	0.43301270189221674	0.9574271077563358
220	1	0.4532587826249917	0.0015909123033138453	3.8817558793914753	0.45133546692421933	0.5610836076867808	0.34694433324435453	0.48112522432468957	0.4082482904638631	0.3191423692521138	0.6735753140545644	0.21516574145596687	0.5853140973807072	0.4906533814626569
225	1	0.7444436374319654	0.0009410608615361201	2.955685738665898	0.583333333333331	0.6123724356957951	0.6770032003863284	0.6009252125773299	0.5068968775248497	0.7500000000000034	0.9013878188659953	1.0865337342004424	0.7905694150420953	0.9354143466934833
301	1	0.5522871061510922	0.0012664576373030006	3.1651373641519296	0.500000000000004	0.5931710140017377	0.7515416254704848	0.396746023807937	0.7993052538854528	0.4906533814626569	0.360041149911546	0.7391185942027837	0.4409585518440996	0.45133546692421933
304	1	1.0372570031004835	0.0006773371569405588	1.8506394014821999	1.2990381056766587	1.1118053386771942	0.7312470322826793	1.4766704288891122	1.0833333333333304	0.7359800721939868	0.9242113755341157	0.9965217285917838	0.7637626158259709	1.2499999999999996
307	1	0.4311252052521372	0.0024832035061875374	4.293767170968446	0.6346477588219938	0.2041241452319333	0.44876373392787755	0.08333333333333481	0.7905694150420953	0.34359213546813694	0.6718548123582145	0.5335936864527379	0.14433756729740643	0.4564354645876409
309	1	0.37795987093037214	0.002402307828621429	3.9051343320242755	0.4930066485916337	0.3435921354681391	0.11785113019775688	0.4787135538781683	0.5651941652604392	0.4787135538781714	0.11785113019776002	0.2500000000000015	0.4859126579037738	0.44876373392787755
503	1	0.2627783622828609	0.0025937402793690285	8.145247293888735	0.2041241452319315	0.263523138347364	0.3535533905932717	0.27638539919628285	0.2635231383473654	0.2041241452319315	0.27638539919628424	0.23570226039551376	0.2499999999999985	0.30046260628866495
504	1	0.40849325053608543	0.0017221137930473526	3.368319392609194	0.6009252125773286	0.37267799624996556	0.6346477588219919	0.5	0.3333333333333304	0.35355339059327373	0.5270462766947251	0.26352313834736396	0.23570226039551373	0.2635231383473612
703	1	0.7437351903779125	0.001145195777697217	2.2077897523411623	0.2499999999999985	0.31180478223116254	0.7120003121097965	1.099242163189411	0.47871355387816905	0.6561673228343186	1.0833333333333337	0.8779711460710607	0.9646530752325171	1.003466214899357
704	1	0.2835378020499721	0.3014880715426147	3.5909804594295696	0.19245008972987357	0.00065147001587056	0.6085806194501842	0.00065147001587056	0.19245008972987357	0.430331482911936	0.19245008972987357	0.6085806194501842	0.00065147001587056	0.6085806194501842
706	1	0.5872850982301444	0.0012612258700302225	3.4032872202867632	0.2357022603955169	0.5400617248673203	0.5951190357119073	0.5068968775248526	0.5400617248673211	0.5464532103585037	0.692218655243174	0.7682953714410736	0.6400954789890523	0.8079466429027226
710	1	0.5273060051378671	0.0013418659723559967	4.000172892074511	0.6526300069150409	0.4409585518441019	0.56927504255331	0.360041149911546	0.7391185942027829	0.2886751345948112	0.7071067811865483	0.5931710140017401	0.4409585518440996	0.48112522432468957
808	1	0.5342519865923566	0.0014041513709753034	3.136832057675783	0.2357022603955169	0.45643546458764167	0.4166666666666661	0.8333333333333348	0.5651941652604425	0.3818813079129857	0.7264831572567806	0.46398036356916955	0.6561673228343186	0.6066758241067091
809	1	0.5483322396309326	0.00135387752596859	3.9612537188280332	0.5426273532033228	0.40824829046386446	0.4887626099538401	0.8850612031567855	0.40138648595973925	0.316227766016837	0.7149203529842416	0.38729833462074015	0.6009252125773323	0.7378647873726225
811	1	0.7522367325162361	0.0009312470362500368	3.044417204208352	0.9831920802501767	0.6009252125773328	0.9128709291752761	0.6055300708194988	0.9219544457292881	0.722649446289293	0.6912147117775913	0.636832439151426	0.5527707983925642	0.8944271909999142
813	1	0.6096046599201523	0.001255958769935313	5.1915590735774435	0.4999999999999994	0.38005847503304574	0.799305253885453	0.38005847503304413	0.5916079783099586	0.7453559924999296	0.47726070210921157	1.046156988431681	0.34960294939004827	0.8266397845091514
816	1	0.5238819088137275	0.0014590939145616055	3.267094624718737	0.3227486121839537	0.3632415786283898	0.3535533905932759	0.5892556509887894	0.5892556509887925	0.2499999999999985	0.7216878364870322	0.6821127309893732	0.5590169943749468	0.8079466429027226
819	1	0.5778881110195092	0.0013802251034472507	3.3594849571917123	0.19720265943665588	0.3872983346207424	0.7031674369909656	0.5676462121975459	0.45946829173634046	0.6497862896539297	0.5916079783099621	0.7226494462892934	0.54262735320332	0.9574271077563359
822	1	0.5696923567858335	0.0012295458417121337	5.030459348413751	0.5725188012439221	0.48304589153964855	0.3726779962499676	0.5868938953886339	0.645497224367901	0.48304589153964667	0.7490735018081409	0.7110243002567203	0.4830458915396479	0.6101001739241059
824	1	0.7287486957909056	0.0009989326521899944	3.105874855978129	0.8130873945100292	0.703167436990964	0.5426273532033256	0.5322906474223749	0.9660917830792963	0.6749485577105504	0.7149203529842408	1.0954451150103333	0.40824829046386374	0.8366600265340762
903	1	0.4910128128074849	0.0016238885890669514	3.812442899097844	0.34359213546813694	0.6972166887783955	0.2204792759220481	0.5400617248673196	0.6291528696058976	0.2041241452319333	0.4487637339278726	0.692218655243175	0.6009252125773311	0.5335936864527393
905	1	0.5681497388634752	0.00125327043464617	3.7380782985612506	0.5962847939999436	0.4533823502911823	0.8299933065325815	0.6497862896539343	0.45338235029118423	0.5270462766947291	0.6146362971528608	0.5322906474223765	0.34156502553198664	0.6831300510639724
908	1	0.41736571415528606	0.0017070886039172446	5.904929317352486	0.38188130791298375	0.3632415786283898	0.2204792759220481	0.30046260628866617	0.513701166914079	0.4409585518440987	0.45643546458763684	0.5400617248673211	0.4999999999999985	0.45643546458763845
102	2	0.43498468581595867	0.0018445445374149782	3.5458711760805888	0.30429030972509125	0.419435246403931	0.5610836076867851	0.360041149911546	0.34694433324435453	0.4906533814626609	0.13608276348795315	0.7757911135427227	0.34694433324435736	0.6085806194501842
106	2	0.424984598535029	0.0017276791095065496	4.223113244889099	0.3632415786283898	0.2041241452319333	0.4787135538781668	0.3435921354681391	0.4166666666666652	0.6123724356957916	0.3726779962499636	0.5464532103585003	0.3227486121839503	0.5892556509887894
110	2	0.47719783080154105	0.0015111767512237197	4.309037744786903	0.5713045500334188	0.5400617248673217	0.31180478223116137	0.2635231383473654	0.5204164998665318	0.39965262694272635	0.7406828681096316	0.4249182927993967	0.5137011669140819	0.4859126579037738
203	2	0.38510160224499557	0.001855558818561538	6.892509115253654	0.3162277660168389	0.5322906474223765	0.34960294939004993	0.5821416398857666	0.4013864859597422	0.3162277660168398	0.3726779962499668	0.3872983346207409	0.2357022603955137	0.35746017649212003
213	2	0.5425640416150458	0.001733716246406925	2.609202762676832	0.23570226039551795	0.3600411499115501	0.21516574145597148	1.0363754503432039	0.36004114991154873	0.3191423692521138	1.0801234497346415	0.21516574145596687	0.7817359599705705	0.822147143719373
215	2	0.6837884840423447	0.0011453984086071648	2.803162363491606	0.8333333333333331	0.26874192494328314	1.0082988974836116	0.4887626099538389	0.7817359599705733	0.48304589153965105	0.6582805886043864	0.8498365855987993	0.5055250296034368	0.960324019392533
222	2	0.4613135805749593	0.002172749554498217	4.506776633649499	0.4487637339278759	0.25	0.6346477588219938	0.4999999999999985	0.623609564462324	0.30046260628866495	0.08333333333333037	0.7682953714410751	0.6922186552431708	0.3118047822311602
223	2	0.649059588883405	0.0010787748342463294	2.877339521062064	0.6804138174397724	0.5931710140017418	0.7817359599705742	0.6666666666666637	0.3333333333333363	0.8050764858994154	0.8713548411865626	0.49065338146265586	0.7071067811865442	0.5610836076867833
302	2	0.5603745841903451	0.001303877939220168	3.20083790711573	0.4930066485916337	0.4330127018922211	0.27638539919628285	0.7359800721939873	0.4564354645876393	0.5651941652604399	0.44876373392787755	0.6770032003863317	0.7772815877574036	0.7406828681096346
305	2	0.41011288426546255	0.0019044944311408228	4.708129275686668	0.5400617248673217	0.5892556509887894	0.4564354645876393	0.20412414523192968	0.4859126579037738	0.5137011669140797	0.408248290463863	0.1666666666666652	0.4249182927994002	0.31180478223116376
306	2	0.5047434465605635	0.0014651807183543467	3.929881381341957	0.30046260628866495	0.44095855184409705	0.39965262694272635	0.8291561975888504	0.3227486121839503	0.35355339059327273	0.6123724356957958	0.5833333333333304	0.47871355387816905	0.7264831572567786
308	2	0.4901547354378437	0.0014421854098376618	4.424478425382167	0.45643546458764006	0.4930066485916329	0.5951190357119017	0.263523138347364	0.7120003121097976	0.5590169943749488	0.4249182927993993	0.5000000000000014	0.44876373392787755	0.44876373392787344
310	2	0.4693393586090611	0.0016086945859649369	4.1371650325840115	0.43033148291193835	0.30429030972509286	0.43033148291193835	0.7328281087929417	0.4082482904638643	0.2721655269759063	0.8277591347639638	0.23570226039552009	0.4906533814626599	0.5610836076867851
505	2	0.42737777336632476	0.0018679310362689802	2.913023603749263	0.44095855184410077	0.5181877251716035	0.7757911135427189	0.19245008972987357	0.1924500897298787	0.4906533814626609	0.2886751345948163	0.30429030972509125	0.3967460238079395	0.6735753140545644
506	2	0.48935025687945466	0.0015751158387653332	2.821744996748182	0.4811252243246865	0.7200822998230961	0.7698003589194994	0.7993052538854515	0.4409585518440996	0.2886751345948129	0.36004114991154734	0.47140452079103173	0.34694433324435453	0.21516574145596687
510	2	0.3499922095745593	0.10162438360188396	4.250519287480958	0.3967460238079345	0.2886751345948112	0.3967460238079383	0.00065147001587056	0.49065338146265586	0.23570226039551376	0.3967460238079345	0.6085806194501842	0.2886751345948112	0.3967460238079383
604	2	0.7226763010194696	0.0010474937641082125	2.8145442084904215	0.6309898162000331	0.4303314829119314	0.9860132971832719	0.30429030972509286	0.7391185942027829	0.8277591347639656	0.5181877251716035	1.1426091000668421	0.6804138174397694	0.9670497325294021
611	2	0.6663094075979197	0.0011632406820978312	3.710575337581605	0.6871842709362782	0.34694433324435736	1.1262852740396287	0.5931710140017401	0.5270462766947271	0.7328281087929417	0.28867513459481464	1.1626916409142405	0.5527707983925658	0.6454972243679021
612	2	0.45094437799626647	0.0016722110610953294	3.0302244189367054	0.6382847385042261	0.3967460238079333	0.21516574145597148	0.2886751345948129	0.7757911135427176	0.5181877251715987	0.396746023807937	0.5773502691896258	0.4303314829119314	0.27216552697590995
613	2	0.5552318004506762	0.0013404346104501773	2.6181360646339744	0.34694433324435736	0.48112522432468957	0.6085806194501842	0.2886751345948129	0.6804138174397729	0.6161409170227468	0.6085806194501857	0.8660254037844388	0.30429030972509286	0.7515416254704814
705	2	0.393038672045795	0.0023257651801862613	5.536798457632602	0.18633899812497984	0.6400954789890516	0.24999999999999703	0.27638539919628285	0.7359800721939883	0.11785113019775688	0.31180478223116254	0.6770032003863322	0.4714045207910338	0.2635231383473654
803	2	0.5609995831561237	0.0013258812550634436	3.28863140137879	0.5527707983925678	0.2788866755113582	0.5773502691896253	0.903696114115063	0.41499665326629204	0.6009252125773294	0.4830458915396455	0.40824829046386296	0.6790516262487782	0.7110243002567144
805	2	0.5087738599581946	0.0014508394607141862	4.155912174880583	0.679051626248779	0.36514837167010994	0.5868938953886345	0.38729833462074015	0.6009252125773339	0.7264831572567788	0.48304589153964916	0.25819888974716115	0.4281744192888369	0.5725188012439221
810	2	0.5685304404370961	0.001321184405918695	4.072140125836509	0.4330127018922211	0.6009252125773323	0.2635231383473696	0.8036375634160786	0.3818813079129857	0.47871355387817216	0.4999999999999985	0.6123724356957945	0.7021791477646985	0.9090593428863106
812	2	0.5110855512124071	0.0015212414299253236	3.791566892554209	0.6540472290116215	0.5868938953886345	0.7601169500660929	0.7673909622147571	0.32489314482696574	0.4533823502911817	0.22360679774997763	0.5477225575051661	0.3333333333333339	0.45946829173633924
814	2	0.5052364393729625	0.0015661866391040956	6.07725335138267	0.7728015412913085	0.1863389981249818	0.7359800721939888	0.4330127018922193	0.68211273098937	0.35355339059327273	0.39965262694272635	0.6821127309893721	0.4249182927993976	0.38188130791298763
817	2	0.5489978302981865	0.0013836551720064298	4.01866176590933	0.4887626099538401	0.21081851067789148	0.5821416398857666	0.5163977794943211	0.41499665326629204	0.6236095644623246	0.5916079783099601	0.687184270936277	0.5962847939999416	0.7781745019952497
818	2	0.7942461939514458	0.0008773511891966702	3.027458313400662	0.7168604389202218	0.4930066485916322	0.8858454843945536	1.0606601717798194	0.7312470322826762	0.7682953714410736	1.0929064207169994	0.6770032003863279	0.7216878364870323	0.7949493345141201
821	2	0.5500185771390352	0.0015145793880945082	2.6841473585604314	0.9930312739844182	0.36324157862839085	0.88975652100261	0.5335936864527372	0.6821127309893721	0.2635231383473696	0.5951190357119073	0.5590169943749475	0.2041241452319315	0.416666666666667
823	2	0.6567727439651893	0.0010531737930813587	3.8175208897076214	0.5426273532033228	0.5322906474223764	0.5109903238918634	0.7490735018081401	0.8164965809277238	0.6146362971528575	0.8232726023485634	0.5962847939999436	0.6749485577105526	0.7071067811865476
902	2	0.5816092733630779	0.0012371582874142716	4.580046237087374	0.4330127018922202	0.4249182927993993	0.7637626158259773	0.4249182927994002	0.5068968775248519	0.6400954789890534	0.6922186552431756	0.5892556509887913	0.390867979985289	0.9501461875826201
904	2	0.7622179963694743	0.001608051303899451	1.8153984830912362	0.7168604389202177	0.9128709291752783	1.0639287779003088	0.8740073734751278	1.13651514141549	1.1931517552730289	1.1365151414154877	0.22047927592204977	0.11785113019775688	0.2499999999999985
906	2	0.36048141670276146	0.002021715683655726	5.004435670483486	0.3227486121839503	0.22047927592204977	0.49300664859163745	0.22047927592204977	0.23570226039551376	0.3535533905932738	0.408248290463863	0.4564354645876393	0.408248290463863	0.4859126579037738
909	2	0.677158160545252	0.0011444092676719329	2.7238048009030806	1.111805338677194	0.30046260628866495	1.0	0.5400617248673183	0.82915619758885	0.4859126579037738	0.6770032003863317	0.7682953714410736	0.38188130791298375	0.6770032003863294
101	3	0.6930955155731661	0.0010881460106007012	2.479125347453206	0.8579691784155852	0.3632415786283898	0.7905694150420939	0.3726779962499646	0.6180165405913061	1.099242163189413	0.7168604389202218	0.9895285072531587	0.5335936864527372	0.5892556509887906
107	3	0.535388931880216	0.0016599055713936853	3.039171805217304	0.5833333333333329	0.11785113019775374	0.6009252125773323	0.4787135538781683	0.49300664859163745	0.8858454843945551	0.4249182927993993	0.6561673228343163	0.3818813079129896	0.7312470322826746
108	3	0.4606449876772423	0.0015549873647975622	4.464323688083172	0.6821127309893689	0.5464532103584989	0.5270462766947308	0.38188130791298375	0.3908679799852833	0.3632415786283898	0.5651941652604386	0.3996526269427282	0.4999999999999993	0.2500000000000015
210	3	0.654002268803918	0.0011386984280422475	2.8220650641853204	0.5270462766947303	0.5270462766947303	0.9486832980505125	0.756453714527348	0.5055250296034364	0.5773502691896257	0.32489314482696574	1.0274023338281624	0.6191391873668889	0.7264831572567799
214	3	0.29000169462507414	0.0024138977880856765	5.9473128820480134	0.2886751345948116	0.25	0.2499999999999985	0.20412414523193514	0.2763853991962842	0.22047927592205147	0.4249182927993993	0.35355339059327484	0.2499999999999985	0.38188130791298763
216	3	0.2222038811056483	0.0033132907741271166	9.760617264994341	0.34156502553198664	0.25819888974716115	0.2788866755113571	0.19720265943665288	0.12909944487358058	0.12909944487357827	0.25819888974716	0.1825741858350521	0.22360679774997763	0.2236067977499763
218	3	0.5239295748655842	0.0013582391031501378	3.503753568011614	0.46398036356916716	0.5590169943749475	0.7312470322826772	0.4564354645876393	0.540061724867319	0.3726779962499646	0.3004626062886637	0.7359800721939862	0.5590169943749461	0.5204164998665318
219	3	0.3758598573290827	0.0019721608027173845	4.252598211394859	0.3435921354681391	0.24999999999999703	0.3435921354681391	0.3535533905932738	0.5400617248673217	0.3118047822311614	0.1863389981249818	0.5270462766947295	0.5590169943749468	0.34359213546813694
221	3	0.47913425456243264	0.0015419210935782952	4.036180121119075	0.4409585518440987	0.4787135538781714	0.6922186552431734	0.6770032003863301	0.39965262694272635	0.3227486121839503	0.48591265790377225	0.540061724867321	0.2204792759220481	0.5335936864527344
224	3	0.6912289473691626	0.0010977907392930373	2.4080557548295234	0.9090593428863097	0.2886751345948129	0.6346477588219925	0.9574271077563389	0.7120003121097913	0.7861650943380478	0.5335936864527336	0.4249182927993993	0.7453559924999292	0.92044675143227
502	3	0.7297329415106808	0.0010084314245866477	2.0277741165614653	0.396746023807932	0.6454972243679029	1.109721353079898	0.585314097380708	0.5931710140017384	0.9622504486493793	0.7576767609436573	0.8713548411865623	0.38490017945975225	0.9906974722292776
507	3	0.5822547213147775	0.0017313085094379395	2.683537822015158	0.9501461875826139	0.9354143466934837	1.0137937550497027	0.9279607271383354	0.3726779962499656	0.4249182927994002	0.3535533905932738	0.35355339059327484	0.11785113019776002	0.3726779962499656
601	3	0.4089558185658881	0.0021159184782249788	4.008667142786795	0.19245008972987357	0.30429030972509286	0.4811252243246865	0.30429030972509286	0.13608276348795678	0.6735753140545601	0.30429030972509125	0.7757911135427176	0.2721655269759063	0.6454972243679029
605	3	0.6220594693333829	0.0011162093821969648	2.494026104091305	0.4409585518440996	0.56927504255331	0.48112522432468957	0.8388704928078609	0.7576767609436612	0.47140452079103384	0.5181877251716015	0.49065338146265886	0.8766518798921944	0.7757911135427176
606	3	0.20363093159152879	0.0037356084550009736	6.000698269019275	0.21516574145596687	0.19245008972987357	0.13608276348795315	0.09622504486493935	0.34694433324435453	0.34694433324435453	0.13608276348795315	0.13608276348795678	0.21516574145596687	0.21516574145596917
608	3	0.2805992123760766	0.301280518773851	5.358449696564314	0.30429030972509286	0.2721655269759063	0.2721655269759063	0.2721655269759063	0.5610836076867808	0.5610836076867808	0.5610836076867808	0.00065147001587056	0.00065147001587056	0.00065147001587056
701	3	0.34075654002125955	0.0022783745150027307	5.640421248330873	0.20412414523193514	0.5400617248673224	0.263523138347364	0.2763853991962842	0.5270462766947295	0.3118047822311614	0.14433756729740643	0.3535533905932759	0.4639803635691664	0.32274861218395023
702	3	0.46511757718810903	0.0016525114549956563	7.038384732511158	0.26874192494328425	0.4887626099538377	0.31622776601683605	0.6992058987800995	0.5163977794943211	0.28867513459481287	0.7852812659593152	0.35746017649212003	0.32489314482696574	0.6055300708194974
707	3	0.5514416375093097	0.0013705743655317284	3.9377974630967483	0.5833333333333335	0.6922186552431708	0.5137011669140797	1.0206207261596565	0.4249182927993993	0.25000000000000444	0.5335936864527372	0.3632415786283888	0.5204164998665318	0.6123724356957958
708	3	0.7786546202929234	0.0011112885032520615	2.765781863236343	0.5000000000000022	0.390867979985289	0.9682458365518511	0.5951190357119042	0.5892556509887913	0.9753916592266364	0.8036375634160782	1.2610621625351295	0.24999999999999703	1.4529663145135547
801	3	0.5756146257434421	0.0014637637376930578	4.164519704748929	0.45133546692421933	0.5527707983925649	0.1666666666666652	0.6382847385042245	0.7005289007176937	0.372677996249963	0.8050764858994124	0.481125224324688	0.8871510790372955	0.7005289007176935
804	3	0.6108961643960299	0.0011511352497983452	4.2859644374850765	0.72648315725678	0.46147910349544835	0.645497224367901	0.6490734136415511	0.44095855184409855	0.5692750425533095	0.790569415042095	0.5181877251715987	0.56519416526044	0.7422438453270758
806	3	0.3479095645703305	0.0022817718483000883	5.460696388354925	0.18257418583505375	0.4082482904638638	0.32489314482696574	0.44095855184409954	0.316227766016837	0.38729833462074015	0.34156502553198664	0.48876260995383713	0.12909944487358285	0.45946829173633785
807	3	0.8861927005370058	0.000928627122417528	1.792510939140941	1.1180339887498945	0.4999999999999982	1.586400537905438	1.2780193008453884	0.8498365855987982	0.5163977794943211	0.44095855184409755	1.2472191289246475	0.8595864638818442	0.46547466812563015
907	3	0.37211639299480614	0.0021774380732106613	4.133832244631787	0.25	0.16666666666666963	0.4166666666666652	0.6400954789890516	0.3004626062886674	0.1666666666666652	0.4249182927993993	0.44876373392787505	0.5951190357119048	0.31180478223116254
103	4	0.5109341251002482	0.0014713251109272068	5.596939260933377	0.3004626062886637	0.6400954789890534	0.31180478223116376	0.8416254115301731	0.390867979985289	0.38188130791298763	0.6066758241067108	0.5951190357119073	0.3435921354681359	0.6972166887783975
109	4	0.6839031341544483	0.0010305516647810603	3.705791167286386	0.6055300708194993	0.7745966692414833	0.6831300510639715	0.8399735445569446	0.6582805886043833	0.38005847503304335	0.7110243002567181	0.6324555320336739	0.8198915917499238	0.7340905181848407
201	4	0.4998753072534796	0.0013867440968943143	4.479040932460708	0.605530070819497	0.5322906474223782	0.4281744192888376	0.6871842709362773	0.41499665326629204	0.372677996249962	0.4887626099538383	0.44721359549995726	0.5055250296034346	0.5163977794943211
211	4	1.0549702548340365	0.001063573532344194	1.2802878218359752	1.504622507105649	1.8427786989579997	2.0138409955990952	0.7499999999999976	0.3435921354681402	0.5137011669140812	0.8700255424092139	0.18633899812497984	1.178511301977582	1.346291201783627
217	4	0.5762311898969431	0.001454401233373157	3.0755698591293372	0.21516574145596687	0.3967460238079383	0.6454972243679029	0.5773502691896258	0.5773502691896258	0.4906533814626569	0.7757911135427176	0.8277591347639638	0.21516574145596687	1.0408329997330665
609	4	0.5017610790031585	0.0018156545029886049	2.452746202832053	0.21516574145596687	0.21516574145596687	0.7993052538854515	0.27216552697591356	0.23570226039551379	0.6382847385042261	0.4409585518441019	0.8713548411865608	0.28867513459481464	1.0408329997330688
610	4	0.42951490832362715	0.0019803240923948755	4.230202316095517	0.7934920476158766	0.4906533814626609	0.7698003589195045	0.38490017945975225	0.4082482904638631	0.1924500897298787	0.43033148291193835	0.30429030972509125	0.13608276348795315	0.38490017945975225
802	4	0.6500690907006268	0.0011956504255150211	4.041500965574638	0.634647758821992	0.2545875386086555	1.0650160840378233	0.5651941652604391	0.5892556509887867	0.6309898162000296	0.49999999999999956	0.9452610848429749	0.5892556509887881	0.726483157256779
820	4	0.5968221647541417	0.0012924501009367382	5.134337897906006	0.4594682917363386	0.7226494462892943	0.26874192494328203	0.4887626099538395	0.7958224257542215	0.38729833462074015	0.7781745019952491	0.9036961141150626	0.44095855184409954	0.722649446289291
901	4	0.7225693521086191	0.0009847619624544033	2.912311507308678	0.8399735445569404	0.6912147117775901	0.9486832980505133	0.4409585518440989	0.7031674369909664	0.4887626099538395	0.6666666666666647	0.9128709291752777	0.7993052538854559	0.7340905181848426
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----
